# -*- coding: utf-8 -*-

import os
import json
import random
import logging

from aiogram import Bot, Dispatcher, executor, types
from generate import generate_file, generate_canvas, pad, generate_pptx

from Crypto.Cipher import DES

# Set an API_TOKEN.
API_TOKEN = '5948098907:AAGNyGlR_m3afJXM070vmDlKsQzC_Y1T_c0'

# Configure the logging.
logging.basicConfig(level=logging.INFO)

# Initialize a bot and a dispatcher.
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Initialize encriptor.
key = b'abcdefgh'
des = DES.new(key, DES.MODE_ECB)

# Initialize users' data.
ud = dict()
# The list of questions.
with open('questions.json', 'r') as f: questions = json.load(f) 
# The list of questions' types (expects text / photo as an answer).
with open('questions_types.json', 'r') as f: questions_types = json.load(f)
# The list of tags of questions.
with open('tags.json', 'r') as f: tags = json.load(f)
# The list of people with access to the admin panel (managers).
with open('admins.json', 'r') as f: admins = json.load(f)
# The list of blocked users.
with open('blacklist.json', 'r') as f: blacklist = json.load(f)
# –°ontacts to whom applications are sent (analysts).
with open('contacts.json', 'r') as f: contacts = json.load(f)  
# Statistics.
with open('stats.json', 'r') as f: stats = json.load(f)

# Bot's functions.

@dp.message_handler(commands=['cancel'])
async def start(message: types.Message):
    """Initializes a dialog."""
    global ud
    uid = message.from_id

    # Reset the current state.
    ud[uid] = dict()
    ud[uid]["state"] = 0
    ud[uid]["flag"] = False
    ud[uid]["answers"] = {}
    ud[uid]["image_count"] = 0

    # Create a keyboard.
    res = types.ReplyKeyboardMarkup(resize_keyboard=True)
    res.add(types.KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å!"))
    res.add(types.KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"))

    # Reply to the user.
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã"
                            "\n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ "
                            "—É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ "
                            "–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–∑ —Ñ–æ–Ω–¥–∞ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö "
                            " –ò–Ω–Ω–æ–≤–∞—Ü–∏–π –ú–æ—Å–∫–≤—ã."
                            "\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–º —Ñ–æ–Ω–¥–µ –∏ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
                            " –ø–æ —Å—Å—ã–ª–∫–µ: https://ftim.ru/."
                            "\n\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, "
                            " –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
                            " –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ "
                            "—Ç–µ–∫—É—â–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."
                            " –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=res)


@dp.message_handler(content_types=['photo'])
async def photo_processing(message):
    """
    Triggeres when the user sends an image and starts its proccessing.
    """
    global ud, tags
    uid = message.from_id
    
    ud[uid]["image_count"] += 1
    ud[uid]["flag"] = False

    if not os.path.exists(f'users/{uid}'):
        os.mkdir(f'users/{uid}')

    await message.photo[-1].download(f'users/{uid}/{tags[ud[uid]["state"]]}_{ud[uid]["image_count"]}.jpg')


@dp.message_handler()
async def processing(message: types.Message):
    """Determines type of user."""
    uid = message.from_id

    if uid in admins:
        await handle_admin_message(message)
    else:
        await handle_user_message(message)


@dp.callback_query_handler()
async def handle_analytic_message(callback_query: types.CallbackQuery):
    """Handles messages from an analytic."""
    global blacklist, stats
    text = callback_query.data
    uid = text.split(";")[1]
    answer = text.split(";")[0]
    if answer == "–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        blacklist.append(uid)
    else:
        if answer == "–ø—Ä–∏–Ω—è—Ç—å":
            answer = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ."
            stats["–ø—Ä–∏–Ω—è—Ç–æ"] += 1 
        else:
            answer = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            stats["–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"] += 1
        await bot.send_message(uid, answer)


async def handle_admin_message(message: types.Message):
    """Handles messages from an admin."""
    global ud, questions, tags, contacts, admins, stats
    uid = message.from_id
    text = message.text

    res = types.ReplyKeyboardMarkup(resize_keyboard=True)
    res.add(types.KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"))
    res.add(types.KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"))
    res.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"))
    res.add(types.KeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"))
    res.add(types.KeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
    res.add(types.KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
        
    if text == "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.')
        admins.remove(uid)
        await start(message)

    elif ud[uid]["state"] == "contacts":
        contacts = [text.split('\n')]
        ud[uid]["state"] = 0
        await message.answer(text="–†–æ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=res)

    elif text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤":
        questions_list = '\n'.join([f'{i + 1}. {q}' for i, q in enumerate(questions)])
        # Reply to the user.
        for x in range(0, len(questions_list), 4096):
            await message.answer(text=questions_list[x:x+4096], reply_markup=res)

    elif text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤":
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç–æ–ª–±–µ—Ü id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                                  "–∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å —Ä–æ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.")
        ud[uid]["state"] = "contacts"

    elif text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        await message.answer(text=f'–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ {stats["–ø—Ä–∏–Ω—è—Ç–æ"] + stats["–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"]}'
                                    f'\n–ü—Ä–∏–Ω—è—Ç–æ {stats["–ø—Ä–∏–Ω—è—Ç–æ"]}'
                                    f'\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ {stats["–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"]}',
                     reply_markup=res)


async def handle_user_message(message: types.Message):
    """Handles messages from an average user."""
    global ud, questions, tags, contacts, admins, blacklist
    uid = message.from_id
    text = message.text

    if des.encrypt(pad(str.encode(text))) == b'\x05\x97\xfd\x8a\xa4/Sb\x03Q\x10L\x06\xee&z':  
        admins.append(uid)
        res = types.ReplyKeyboardMarkup(resize_keyboard=True)
        res.add(types.KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"))
        res.add(types.KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"))
        res.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"))
        res.add(types.KeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"))
        res.add(types.KeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
        res.add(types.KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))

        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é.',
                            reply_markup=res)
        return

    if text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤":
        res = types.ReplyKeyboardMarkup(resize_keyboard=True)
        res.add(types.KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å!"))
        questions_list = '\n'.join([f'{i + 1}. {q}' for i, q in enumerate(questions)])
        # Reply to the user.
        for x in range(0, len(questions_list), 4096):
            await message.answer(text=questions_list[x:x+4096], reply_markup=res)
        return

    # Initialize a dialog.
    if (uid not in ud) or (text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É"):
        await start(message)
        return
    
    # Stop collecting images and go the next question.
    elif (text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" and not ud[uid]["flag"]):
        ud[uid]["image_count"] = 0
        ud[uid]["state"] += 1
        ud[uid]["flag"] = True

    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        ud[uid]["state"] -= 2

    # Finish the dialog and send the respond to the analytics.
    if ud[uid]["flag"]:
        ud[uid]["state"] += 1

    if ud[uid]["state"] >= len(questions):
        
        if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            ud[uid]["answers"][tags[ud[uid]["state"] - 1]] = "–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            ud[uid]["answers"][tags[ud[uid]["state"] - 1]] = text

        if uid in blacklist: return

        path = f'users/{uid}/'
        if not os.path.exists(path):
            os.mkdir(path) 

        json_answers = {t: a for t, a in ud[uid]["answers"].items()}
        json_answers["path"] = path

        generate_canvas(json_answers)
        generate_file(json_answers)
        generate_pptx(json_answers)

        contact = random.choice(contacts)
        
        await bot.send_message(contact, "–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")

        await bot.send_document(contact, open(f'{path}slides.pptx', 'rb'))
        await bot.send_document(contact, open(f'{path}CANVASresult.docx', 'rb'))
        await bot.send_document(contact, open(f'{path}MEMOresult.docx', 'rb'))

        res = types.InlineKeyboardMarkup(resize_keyboard=True)
        res.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                                callback_data=f"–ø—Ä–∏–Ω—è—Ç—å;{uid}"))
        res.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", 
                                callback_data=f"–æ—Ç–∫–ª–æ–Ω–∏—Ç—å;{uid}"))
        res.add(types.InlineKeyboardButton(text="‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                                callback_data=f"–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å;{uid}"))

        await bot.send_message(chat_id=contact, text="–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=res)
    
        res = types.ReplyKeyboardMarkup(resize_keyboard=True)
        res.add(types.KeyboardButton(text="üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É"))

        await message.answer(text="–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
                                    " –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫  –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–æ–π,"
                                    " –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
                                    , reply_markup=res)
        return
    
    # Handling question type.
    if questions_types[ud[uid]["state"]] == "text":
        res = types.ReplyKeyboardMarkup(resize_keyboard=True)
        res.add(types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
        res.add(types.KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"))

        await message.answer(text=questions[ud[uid]["state"]], reply_markup=res) 
    else:
        res = types.ReplyKeyboardMarkup(resize_keyboard=True)
        res.add(types.KeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))
        res.add(types.KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
        res.add(types.KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"))

        await message.answer(text=questions[ud[uid]["state"]], reply_markup=res) 

    if ud[uid]["flag"]:
        if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            ud[uid]["answers"][tags[ud[uid]["state"] - 1]] = "–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            ud[uid]["answers"][tags[ud[uid]["state"] - 1]] = text

    ud[uid]["flag"] = True

    
if __name__ == '__main__':
    # Launch the bot.
    executor.start_polling(dp, skip_updates=True)  
